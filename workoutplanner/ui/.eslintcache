[{"C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\index.js":"1","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\store\\reducers\\workouts.js":"2","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\store\\reducers\\utils.js":"3","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\store\\reducers\\auth.js":"4","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\App\\App.js":"5","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\components\\Layout\\Layout.js":"6","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkoutList\\WorkoutList.js":"7","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\Workspace.js":"8","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\store\\actions\\utils.js":"9","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\store\\actions\\auth.js":"10","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkoutList\\WorkoutListItems\\WorkoutListItems.js":"11","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\CreateExcerciseForm\\CreateExcerciseForm.js":"12","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\CreateWorkoutForm\\CreateWorkoutForm.js":"13","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\Timer\\Timer.js":"14","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\SelectedWorkout\\SelectedWorkout.js":"15","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\Auth\\Logout.js":"16","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\Auth\\Login-Register.js":"17","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\components\\UI\\Button\\Button.js":"18","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\components\\UI\\FontAwesomeIcon\\FontAwesomeIcon.js":"19","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\store\\actions\\actionTypes.js":"20","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\axios.js":"21","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\store\\actions\\workouts.js":"22","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\components\\UI\\Input\\Input.js":"23","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\Timer\\TimerControls\\TimerControls.js":"24","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\Timer\\TimerSummary\\TimerSummary.js":"25","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\SelectedWorkout\\ExcerciseListItems\\ExcerciseListItems.js":"26","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\SelectedWorkout\\EditWorkoutForm\\EditWorkoutForm.js":"27","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\Timer\\Clock\\Clock.js":"28"},{"size":928,"mtime":1612480337645,"results":"29","hashOfConfig":"30"},{"size":1855,"mtime":1612480337672,"results":"31","hashOfConfig":"30"},{"size":3894,"mtime":1612480337669,"results":"32","hashOfConfig":"30"},{"size":1222,"mtime":1612480337666,"results":"33","hashOfConfig":"30"},{"size":234,"mtime":1612480337499,"results":"34","hashOfConfig":"30"},{"size":442,"mtime":1612480337457,"results":"35","hashOfConfig":"30"},{"size":2694,"mtime":1612480337623,"results":"36","hashOfConfig":"30"},{"size":1936,"mtime":1612480337605,"results":"37","hashOfConfig":"30"},{"size":2027,"mtime":1612480337658,"results":"38","hashOfConfig":"30"},{"size":2418,"mtime":1612480337655,"results":"39","hashOfConfig":"30"},{"size":3011,"mtime":1612480337632,"results":"40","hashOfConfig":"30"},{"size":6868,"mtime":1612480337526,"results":"41","hashOfConfig":"30"},{"size":3131,"mtime":1612480337537,"results":"42","hashOfConfig":"30"},{"size":12656,"mtime":1612480337581,"results":"43","hashOfConfig":"30"},{"size":11541,"mtime":1612480337564,"results":"44","hashOfConfig":"30"},{"size":1419,"mtime":1612480337521,"results":"45","hashOfConfig":"30"},{"size":3393,"mtime":1612480337510,"results":"46","hashOfConfig":"30"},{"size":577,"mtime":1612480337470,"results":"47","hashOfConfig":"30"},{"size":654,"mtime":1612480337479,"results":"48","hashOfConfig":"30"},{"size":860,"mtime":1612480337652,"results":"49","hashOfConfig":"30"},{"size":170,"mtime":1612480337448,"results":"50","hashOfConfig":"30"},{"size":603,"mtime":1612480337661,"results":"51","hashOfConfig":"30"},{"size":2213,"mtime":1612480337488,"results":"52","hashOfConfig":"30"},{"size":2599,"mtime":1612480337589,"results":"53","hashOfConfig":"30"},{"size":2559,"mtime":1612480337598,"results":"54","hashOfConfig":"30"},{"size":1058,"mtime":1612480337557,"results":"55","hashOfConfig":"30"},{"size":3411,"mtime":1612480337550,"results":"56","hashOfConfig":"30"},{"size":766,"mtime":1612480337575,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tes86g",{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\index.js",[],"C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\store\\reducers\\workouts.js",["133"],"import React from 'react';\r\n\r\nconst initialState = {\r\n    workouts: []\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ('CREATE_WORKOUT'): {\r\n            return {\r\n                ...state, workouts: [\r\n                    ...state.workouts.concat([{\r\n                        id: action.id,\r\n                        cycles: 1,\r\n                        name: action.workoutName,\r\n                        exercises: [],\r\n                        restBetweenExercises: 30,\r\n                        restBetweenCycles: 30\r\n                    }])\r\n                ]}\r\n            }\r\n        case ('INITIALISE_WORKOUTS_FROM_FIREBASE'): {\r\n            return {...state, workouts:  Object.values(action.data) }\r\n        }\r\n        case ('CLEAR_WORKOUTS'): {\r\n            return {...state, workouts: [] }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default reducer\r\n\r\n\r\n// [{\r\n//     id: 6798, \r\n//     cycles: 2, \r\n//     name: 'test1', \r\n//     restBetweenExcercises: 3,\r\n//     restBetweenCycles: 10,\r\n//     exercises: [{\r\n//         id: '76',\r\n//         name: 'Floor Dish Tuck',\r\n//         noOfSets: 1,\r\n//         noOfReps: 1,\r\n//         lengthOfRep: 5,\r\n//         restBetweenReps: 0,\r\n//         restBetweenSets: 0\r\n//     },{\r\n//         id:'7687',\r\n//         name: 'Weighted Turns',\r\n//         noOfSets: 1,\r\n//         noOfReps: 2,\r\n//         lengthOfRep: 5,\r\n//         restBetweenReps: 3,\r\n//         restBetweenSets: 1\r\n//     },{\r\n//         id: '687',\r\n//         name: 'SpiderMan Plank',\r\n//         noOfSets: 2,\r\n//         noOfReps: 1,\r\n//         lengthOfRep: 5,\r\n//         restBetweenReps: 3,\r\n//         restBetweenSets: 5\r\n//     }]},\r\n//     {id: 6738, cycles: 1, name: 'test1i89669697697', restBetweenExcercises: 3,\r\n//     restBetweenCycles: 10, exercises: []},\r\n","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\store\\reducers\\utils.js",["134"],"import React from 'react';\r\n\r\nconst initialState = {\r\n    workspaceState: 'login/register',\r\n    saveRequired: false,\r\n    selectedExercise: {},\r\n    selectedWorkout: {\r\n        exercises: [],\r\n    },\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ('SET_WORKSPACE_STATE'): return {...state, workspaceState: action.state}\r\n        case ('SET_SELECTED_EXERCISE'): {\r\n            return {\r\n                ...state, \r\n                    selectedExercise: {\r\n                        id: action.id, \r\n                        name: action.name,\r\n                        noOfSets: action.noOfSets,\r\n                        noOfReps: action.noOfReps,\r\n                        lengthOfRep: action.lengthOfRep,\r\n                        restBetweenReps: action.restBetweenReps,\r\n                        restBetweenSets: action.restBetweenSets,\r\n                    }}\r\n        }\r\n        case ('SAVE_REQUIRED'): return {...state, saveRequired: action.bool}\r\n        case ('SET_WORKSPACE_WORKOUT'): return {...state, selectedWorkout: action.workout}\r\n        case ('SWITCH_EXERCISES'): {\r\n            const newEx = [...state.selectedWorkout.exercises]\r\n            const [source] = newEx.splice(action.id1, 1)\r\n            newEx.splice(action.id2, 0, source)\r\n            return {\r\n                ...state, selectedWorkout: {\r\n                    ...state.selectedWorkout, exercises: newEx\r\n                }\r\n            }\r\n        }\r\n        case ('UPDATE_EXERCISE'): {\r\n            let index = state.selectedWorkout.exercises.findIndex(ex => ex.id === action.id)\r\n            let newEx = {\r\n                name: action.exerciseName,\r\n                noOfReps: +action.noOfReps,\r\n                lengthOfRep: +action.lengthOfRep,\r\n                restBetweenReps: +action.noOfReps > 1 ? Math.floor(+action.restBetweenReps) : 1,\r\n                noOfSets: +action.noOfSets,\r\n                restBetweenSets: +action.noOfSets > 1 ? Math.floor(+action.restBetweenSets) : 1,\r\n                id: action.id\r\n            }\r\n            let allExs = [...state.selectedWorkout.exercises];\r\n            allExs[index] = newEx\r\n            return {...state, selectedWorkout: {\r\n                ...state.selectedWorkout, exercises: allExs,\r\n            }}\r\n        }\r\n        case ('CREATE_EXERCISE'): {\r\n            return {\r\n                ...state, selectedWorkout: {\r\n                    ...state.selectedWorkout, exercises: state.selectedWorkout.exercises.concat([{\r\n                        name: action.exerciseName,\r\n                        noOfReps: +action.noOfReps,\r\n                        lengthOfRep: +action.lengthOfRep,\r\n                        restBetweenReps: +action.noOfReps > 1 ? Math.floor(+action.restBetweenReps) : 1,\r\n                        noOfSets: +action.noOfSets,\r\n                        restBetweenSets: +action.noOfSets > 1 ? Math.floor(+action.restBetweenSets) : 1,\r\n                        id: action.id\r\n                    }])\r\n                    }\r\n                }\r\n        }\r\n        case ('DELETE_EXERCISE'): {\r\n            let updatedExercises = state.selectedWorkout.exercises.filter(ex => ex.id !== action.id)\r\n            return {\r\n                ...state, selectedWorkout: {\r\n                    ...state.selectedWorkout, exercises: updatedExercises\r\n                    }\r\n                }\r\n        }\r\n        case ('UPDATE_WORKOUT'): {\r\n            return {\r\n                ...state, selectedWorkout: {\r\n                    ...state.selectedWorkout,\r\n                        cycles: Math.floor(+action.cycles),\r\n                        restBetweenCycles: Math.floor(+action.restBetweenCycles),\r\n                        restBetweenExercises: Math.floor(+action.restBetweenExercises),\r\n                    }\r\n                }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default reducer\r\n\r\n","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\store\\reducers\\auth.js",["135"],"import React from 'react';\r\n\r\nconst initialState = {\r\n    authMessage: [],\r\n    currentUser: {\r\n        token: null,\r\n        email: '',\r\n        user: '',\r\n        expires: '',\r\n    },\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ('AUTH_SUCCESS'): {\r\n            const data = action.data\r\n            return {\r\n                ...state, \r\n                currentUser : {\r\n                    email: data.email,\r\n                    user: data.user || data.username,\r\n                    token: data.token,\r\n                    expires: data.expires,\r\n                },\r\n                authMessage: [data.message]\r\n            }\r\n        }\r\n        case ('AUTH_FAILURE'): {\r\n            return {\r\n                ...state, authMessage: action.data,\r\n            }\r\n        }\r\n        case ('LOGOUT'): {\r\n            return {\r\n                ...state, \r\n                authMessage: [], \r\n                currentUser: {\r\n                    token: null,\r\n                    email: '',\r\n                    user: '',\r\n                    expires: '',\r\n                },\r\n            }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default reducer\r\n","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\App\\App.js",[],"C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\components\\Layout\\Layout.js",["136"],"import React, {useState} from 'react';\r\nimport classes from './Layout.module.css';\r\nimport WorkoutList from '../../containers/WorkoutList/WorkoutList';\r\nimport WorkSpace from '../../containers/WorkSpace/Workspace';\r\n\r\n\r\nconst Layout = props => {\r\n\r\n    return (\r\n        <div className={classes.Layout}>\r\n            <WorkoutList/>\r\n            <WorkSpace/>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Layout;\r\n","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkoutList\\WorkoutList.js",["137"],"import React, { useEffect } from 'react';\r\nimport classes from './WorkoutList.module.css';\r\nimport { connect } from 'react-redux';\r\nimport * as utilActionCreators from '../../store/actions/utils';\r\nimport * as AuthActionCreators from '../../store/actions/auth';\r\nimport { faSignOutAlt, faPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport WorkoutListItem from '../WorkoutList/WorkoutListItems/WorkoutListItems';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Icon from '../../components/UI/FontAwesomeIcon/FontAwesomeIcon';\r\n\r\nconst WorkoutList = props => {\r\n\r\n    useEffect(() => {\r\n        if (props.workouts.length === 0) props.setWorkspaceState('login/register')\r\n    }, [])\r\n\r\n    const createWorkout = () => {\r\n        props.setWorkspaceState('creatingWorkout')\r\n    }\r\n\r\n    const logoutHandler = () => {\r\n        props.setWorkspaceState('login/register')\r\n        props.logout()\r\n    }\r\n\r\n\r\n    let workoutList = (\r\n        <ul className={classes.WorkoutListUL}>\r\n            {props.workouts.map(workout => {\r\n                return <WorkoutListItem\r\n                    key={workout.id}\r\n                    id={workout.id}\r\n                    cycles={workout.cycles}\r\n                    workoutName={workout.name}\r\n                    workout={workout}\r\n                    exerciseCount={workout.exercises.length}\r\n                    duration={\"30\"} />\r\n            })}\r\n        </ul>\r\n    )\r\n\r\n    return (\r\n        <div className={classes.WorkoutList}>\r\n            <h1 className={classes.Title}>Workout List</h1>\r\n            {workoutList}\r\n            {props.currentUser.token ?\r\n                <div className={classes.FlexButtons}>\r\n                    <Button\r\n                        extraStyles={classes.Button}\r\n                        clicked={createWorkout}>\r\n                        <Icon icon={faPlus} />\r\n                    </Button>\r\n                    <Button\r\n                        extraStyles={classes.Button}\r\n                        clicked={logoutHandler}>\r\n                        <Icon icon={faSignOutAlt} />\r\n\r\n                    </Button>\r\n\r\n                </div>\r\n                : null}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentUser: state.auth.currentUser,\r\n        workspaceState: state.util.workspaceState,\r\n        workouts: state.workout.workouts\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setWorkspaceState: (state) => dispatch(utilActionCreators.setWorkspaceState(state)),\r\n        logout: () => dispatch(AuthActionCreators.logout()),\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WorkoutList);\r\n\r\n\r\n","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\Workspace.js",["138"],"import React, {useContext} from 'react';\r\nimport classes from './Workspace.module.css';\r\nimport CreateExcerciseForm from './CreateExcerciseForm/CreateExcerciseForm';\r\nimport CreateWorkoutForm from './CreateWorkoutForm/CreateWorkoutForm';\r\nimport Timer from './Timer/Timer';\r\nimport SelectedWorkout from './SelectedWorkout/SelectedWorkout'\r\nimport {connect} from 'react-redux';\r\nimport * as utilActionCreators from '../../store/actions/utils';\r\nimport LoginRegisterPage from './Auth/Login-Register';\r\nimport Logout from './Auth/Logout';\r\n\r\nconst Workspace = props => {\r\n\r\n    let content;\r\n    switch (props.workspaceState) {\r\n        case ('nothing selected'): content = <h3>Please select a workout</h3>\r\n            break\r\n        case ('login/register'): content = <LoginRegisterPage />\r\n            break\r\n        case ('logout'): content = <Logout />\r\n            break\r\n        case ('creatingWorkout'): {\r\n            content = <CreateWorkoutForm />\r\n            break\r\n        }\r\n        case ('creatingExcercise'): case('editingExercise'): {\r\n            content = <CreateExcerciseForm/>\r\n            break\r\n        }\r\n        case ('exercising'): {\r\n            content = <Timer selectedWorkout={props.selectedWorkout}/>\r\n            break\r\n        }\r\n        case ('selectedWorkout'): {\r\n            content = <SelectedWorkout />\r\n            break\r\n        }\r\n        default: throw new Error('no case found')\r\n    }\r\n\r\n    return <div className={classes.Workspace}>\r\n                {content}\r\n            </div>\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        workspaceState: state.util.workspaceState,\r\n        selectedWorkout: state.util.selectedWorkout,\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setWorkspaceState: (state) => dispatch(utilActionCreators.setWorkspaceState(state)),  \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Workspace);\r\n","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\store\\actions\\utils.js",[],"C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\store\\actions\\auth.js",["139"],"import * as actionTypes from './actionTypes';\r\nimport axios from 'axios';\r\nimport {AuthAxios} from '../../axios';\r\n\r\nconst authSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.AUTH_SUCCESS, data\r\n    }\r\n}\r\n\r\nconst authFailure = (data) => {\r\n    return {\r\n        type: actionTypes.AUTH_FAILURE, data\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    return {\r\n        type: actionTypes.LOGOUT\r\n    }\r\n}\r\n\r\nexport const asyncRegister = (username, email, password, password2) => {\r\n    return dispatch => {\r\n        const register_data = {\r\n            username, email, password, password2\r\n        }\r\n        axios.post('http://127.0.0.1:8000/api/auth/register/', register_data)\r\n        .then(res => {\r\n            dispatch(authSuccess(JSON.parse(res.data).data))\r\n        })\r\n            // dispatch(registerSuccess(res.data)))\r\n        .catch(err => {\r\n            //this works consistently beacuse of the renderer in the API\r\n            let errors = []\r\n            try {\r\n                const errorData = JSON.parse(err.response.data).errors\r\n                for(let key in errorData) {\r\n                    errors.push( ...errorData[key])\r\n                }\r\n            }\r\n            catch {\r\n                errors = [\"Something went wrong signing up\"]\r\n            }\r\n            dispatch(authFailure(errors))\r\n                \r\n        })\r\n    }\r\n}\r\n\r\nexport const asyncLogin = (username, password, token) => {\r\n    return dispatch => {\r\n        let headers = {}\r\n        const login_data = {\r\n            username, password\r\n        }\r\n        if(token !== null) {\r\n            axios.post('http://127.0.0.1:8000/api/auth/refresh/', {token : token})\r\n            .then(res => {\r\n                token = res.data.token\r\n            })\r\n            .catch(err => console.log(err))\r\n\r\n            headers = {\r\n                Authorization: `JWT ${token}`,\r\n            }\r\n        }\r\n\r\n        axios.post('http://127.0.0.1:8000/api/auth/login/', login_data, {headers: headers})\r\n        .then(res => {\r\n            console.log(res)\r\n            dispatch(authSuccess(res.data))            \r\n        })\r\n        // dispatch(registerSuccess(res.data)))\r\n        .catch(err => {\r\n            console.log(err.response)\r\n            //this works consistently beacuse of the renderer in the API\r\n            dispatch(authFailure([err.response.data.error, err.response.data.detail]))\r\n        })\r\n    }\r\n}","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkoutList\\WorkoutListItems\\WorkoutListItems.js",["140"],"import React, { useEffect, useState } from 'react';\r\nimport classes from './WorkoutListItems.module.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAtom, faClock, faDumbbell } from '@fortawesome/free-solid-svg-icons';\r\nimport { connect } from 'react-redux';\r\nimport * as utilActionCreators from '../../../store/actions/utils'\r\n\r\nconst WorkoutListItems = props => {\r\n\r\n\r\n    const cycleElement = <FontAwesomeIcon icon={faAtom} size=\"sm\" />\r\n    const durationElement = <FontAwesomeIcon icon={faClock} size=\"sm\" />\r\n    const exerciseCountElement = <FontAwesomeIcon icon={faDumbbell} size=\"sm\" />\r\n    const [duration, setDuration] = useState(0)\r\n\r\n    useEffect(() => {\r\n        calculateDuration()\r\n    }, [])\r\n\r\n    const calculateDuration = () => {\r\n        let totalOfOneCycle = 0;\r\n        let workout = props.workout\r\n        //calculate total exercise\r\n        for (let ex of workout.exercises) {\r\n            let repLength = ex.lengthOfRep * ex.noOfReps\r\n            let lengthOfRestBetweenReps = ex.restBetweenReps * (ex.noOfReps - 1)\r\n            let exLength = ((repLength + lengthOfRestBetweenReps) * ex.noOfSets) + ((ex.noOfSets - 1) * (ex.restBetweenSets))\r\n            totalOfOneCycle += exLength\r\n        }\r\n        totalOfOneCycle += ((workout.exercises.length - 1) * workout.restBetweenExercises)\r\n\r\n        let totalCycles = (totalOfOneCycle * workout.cycles) + ((workout.cycles - 1) * workout.restBetweenCycles)\r\n        setDuration(Math.ceil(totalCycles / 60))\r\n    }\r\n\r\n    const workOutSelected = () => {\r\n        props.selectWorkoutHandler(props.workout)\r\n        props.setWorkspaceState('selectedWorkout')\r\n        props.setSaveRequired(false)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.ListItem} onClick={workOutSelected}>\r\n            <h5 className={classes.Name}>\r\n                {props.workoutName.length > 10 ? props.workoutName.slice(0, 10) + '...' : props.workoutName}\r\n            </h5>\r\n            <div className={classes.Duration}>\r\n                {durationElement} {' '}\r\n                {duration}\r\n            </div>\r\n            <div className={classes.Cycles}>\r\n                {cycleElement}  {' '}\r\n                {props.cycles}\r\n            </div>\r\n            <div className={classes.Count}>\r\n                {props.exerciseCount}  {' '}\r\n                {exerciseCountElement}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        workspaceState: state.util.workspaceState,\r\n        workouts: state.workout.workouts\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        selectWorkoutHandler: (workout) => dispatch(utilActionCreators.selectWorkoutHandler(workout)),\r\n        setWorkspaceState: (state) => dispatch(utilActionCreators.setWorkspaceState(state)),\r\n        setSaveRequired: (bool) => dispatch(utilActionCreators.saveRequired(bool)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WorkoutListItems);\r\n\r\n","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\CreateExcerciseForm\\CreateExcerciseForm.js",["141"],"import React, { useState, useEffect } from 'react';\r\nimport { NumberInput, TextInput, DualNumberInput } from '../../../components/UI/Input/Input';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport classes from './CreateExcerciseForm.module.css';\r\nimport { connect } from 'react-redux';\r\nimport uuid from 'react-uuid';\r\nimport * as workoutActionCreators from '../../../store/actions/workouts';\r\nimport * as utilActionCreators from '../../../store/actions/utils';\r\n\r\nconst CreateExcerciseForm = props => {\r\n\r\n    const [exerciseName, setExerciseName] = useState('');\r\n    const [noOfReps, setNoOfReps] = useState(1);\r\n    const [lengthOfRepSeconds, setLengthOfRepSeconds] = useState(30);\r\n    const [lengthOfRepMinutes, setLengthOfRepMinutes] = useState(0);\r\n    const [lengthOfRep, setLengthOfRep] = useState(30)\r\n    const [restBetweenReps, setRestBetweenReps] = useState(30);\r\n\r\n    const [noOfSets, setNoOfSets] = useState(1);\r\n    const [restBetweenSets, setRestBetweenSets] = useState(30);\r\n\r\n    const [valid, setValid] = useState(false);\r\n    const [touched, setTouched] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (props.workspaceState === 'editingExercise') {\r\n            let ex = props.selectedExercise\r\n            setExerciseName(ex.name)\r\n            setNoOfReps(ex.noOfReps)\r\n            setLengthOfRepSeconds(ex.lengthOfRep % 60)\r\n            setLengthOfRepMinutes(Math.floor(ex.lengthOfRep / 60))\r\n            setRestBetweenReps(ex.restBetweenReps)\r\n            setNoOfSets(ex.noOfSets)\r\n            setRestBetweenSets(ex.restBetweenSets)\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setLengthOfRep((60 * lengthOfRepMinutes) + lengthOfRepSeconds)\r\n    }, [lengthOfRepSeconds, lengthOfRepMinutes])\r\n\r\n    useEffect(() => {\r\n        if (exerciseName === '' || noOfReps < 1 || lengthOfRep < 1 || restBetweenReps < 1 || noOfSets < 1 || restBetweenSets < 1) {\r\n            setValid(false)\r\n        } else setValid(true)\r\n    }, [exerciseName, noOfReps, lengthOfRep, restBetweenReps, noOfSets, restBetweenSets]);\r\n\r\n\r\n    const updateExercise = () => {\r\n        props.updateExercise(\r\n            props.selectedExercise.id, exerciseName, noOfReps, lengthOfRep, restBetweenReps, noOfSets, restBetweenSets\r\n        )\r\n        props.setWorkspaceState('selectedWorkout');\r\n        if (touched) props.saveRequired(true);\r\n    }\r\n\r\n    const createExercise = () => {\r\n        props.createExerciseHandler(\r\n            exerciseName, noOfReps, lengthOfRep, restBetweenReps, noOfSets, restBetweenSets, uuid().toString()\r\n        )\r\n        props.setWorkspaceState('selectedWorkout');\r\n        props.saveRequired(true);\r\n    }\r\n\r\n    const cancel = () => {\r\n        props.setWorkspaceState('selectedWorkout');\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Exercise}>\r\n            {props.workspaceState === 'editingExercise' ?\r\n                <h1>Editing Exercise</h1> : <h1>Create an Exercise</h1>}\r\n            <TextInput\r\n                value={exerciseName}\r\n                label=\"Exercise Name\"\r\n                changed={(e) => {\r\n                    setTouched(true)\r\n                    setExerciseName(e.target.value)\r\n                }} />\r\n            <div className={classes.Reps}>\r\n                <h4>Reps</h4>\r\n                <NumberInput\r\n                    min=\"1\"\r\n                    label=\"No. of Reps\"\r\n                    value={noOfReps}\r\n                    changed={(e) => {\r\n                        setNoOfReps(Math.floor(e.target.value))\r\n                        setTouched(true)\r\n                    }} />\r\n                <DualNumberInput\r\n                    min=\"0\"\r\n                    minuteMin=\"0\"\r\n                    label=\"Rep duration\"\r\n                    minuteVal={lengthOfRepMinutes}\r\n                    secondVal={lengthOfRepSeconds}\r\n                    secondChanged={(e) => {\r\n                        setLengthOfRepSeconds(Math.floor(e.target.value))\r\n                        setTouched(true)\r\n                    }}\r\n                    minuteChanged={(e) => {\r\n                        setLengthOfRepMinutes(Math.floor(e.target.value))\r\n                        setTouched(true)\r\n                    }}\r\n                />\r\n                {noOfReps > 1 ?\r\n                    <NumberInput\r\n                        min=\"1\"\r\n                        label=\"Rest between reps\"\r\n                        value={restBetweenReps}\r\n                        changed={(e) => {\r\n                            setRestBetweenReps(Math.floor(e.target.value))\r\n                            setTouched(true)\r\n                        }} /> : null}\r\n            </div>\r\n            <div className={classes.Sets}>\r\n                <h4>Sets</h4>\r\n                <NumberInput\r\n                    min=\"1\"\r\n                    label=\"No. of Sets\"\r\n                    value={noOfSets}\r\n                    changed={(e) => {\r\n                        setNoOfSets(Math.floor(e.target.value))\r\n                        setTouched(true)\r\n                    }} />\r\n                {noOfSets > 1 ? <NumberInput\r\n                    min=\"1\"\r\n                    label=\"Rest between sets\"\r\n                    value={restBetweenSets}\r\n                    changed={(e) => {\r\n                        setRestBetweenSets(Math.floor(e.target.value))\r\n                        setTouched(true)\r\n                    }} /> : null}\r\n            </div>\r\n            <div className={classes.Buttons}>\r\n                <Button clicked={cancel}>Cancel</Button>\r\n                {props.workspaceState === 'editingExercise'\r\n                    ? <Button disabled={!valid} clicked={updateExercise}>Done</Button>\r\n                    : <Button disabled={!valid} clicked={createExercise}>Add New Exercise</Button>}\r\n            </div>\r\n\r\n        </div>)\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        selectedExercise: state.util.selectedExercise,\r\n        workspaceState: state.util.workspaceState,\r\n        saveRequired: state.util.saveRequired,\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        createExerciseHandler: (exerciseName, noOfReps, lengthOfRep, restBetweenReps, noOfSets, restBetweenSets, id) => dispatch(workoutActionCreators.createExercise(exerciseName, noOfReps, lengthOfRep, restBetweenReps, noOfSets, restBetweenSets, id)),\r\n        setWorkspaceState: (state) => dispatch(utilActionCreators.setWorkspaceState(state)),\r\n        updateExercise: (id, exerciseName, noOfReps, lengthOfRep, restBetweenReps, noOfSets, restBetweenSets) =>\r\n            dispatch(utilActionCreators.updateExercise(id, exerciseName, noOfReps, lengthOfRep, restBetweenReps, noOfSets, restBetweenSets)),\r\n        saveRequired: (bool) => dispatch(utilActionCreators.saveRequired(bool)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateExcerciseForm);\r\n\r\n","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\CreateWorkoutForm\\CreateWorkoutForm.js",["142","143","144"],"import React, {useState, useEffect} from 'react';\r\nimport {NumberInput, TextInput} from '../../../components/UI/Input/Input';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport classes from './CreateWorkoutForm.module.css';\r\nimport {connect} from 'react-redux';\r\nimport uuid from 'react-uuid';\r\nimport * as workoutActionCreators from '../../../store/actions/workouts';\r\nimport * as utilActionCreators from '../../../store/actions/utils';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nconst CreateWorkoutForm = props => {\r\n\r\n    const [newWorkoutID, setNewWorkoutID] = useState(null)\r\n    const [workoutName, setWorkoutName] = useState('');\r\n    const [valid, setValid] = useState(false)\r\n\r\n    useEffect(() => {\r\n        workoutName !== '' ? setValid(true) : setValid(false);\r\n    }, [workoutName])\r\n\r\n    useEffect(() => {    \r\n        if(newWorkoutID !== null) {\r\n            props.setSaveRequired(false)\r\n            let workout = props.workouts.filter(wo => wo.id === newWorkoutID)\r\n            props.selectWorkoutHandler(...workout)\r\n            props.setWorkspaceState('selectedWorkout')\r\n        }        \r\n    }, [props.workouts])\r\n    \r\n    const createWorkout = () => {\r\n        const data = {\r\n            name: workoutName,\r\n            cycles: 1,\r\n            restBetweenExercises: 30,\r\n            restBetweenCycles: 30,\r\n            exercises: null,\r\n        }\r\n        const headers = {\r\n            Authorization: `JWT ${props.currentUser.token}`\r\n        }\r\n        axios.post(`http://127.0.0.1:8000/api/workouts/`, data, {headers: headers})\r\n        .then(res => {\r\n            setNewWorkoutID(res.data.id)\r\n            props.fetchWorkouts(props.currentUser.token)             \r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    const cancel = () => {\r\n        props.setWorkspaceState('nothing selected')\r\n    }\r\n\r\n    return (\r\n            <div className={classes.Workout}>\r\n                <h3>Create a New Workout</h3>\r\n                <TextInput \r\n                    label=\"Workout Name\" \r\n                    changed={(e) => setWorkoutName(e.target.value)}/>\r\n                <Button disabled={!valid} clicked={createWorkout}>Create New Workout</Button>\r\n                <Button clicked={cancel}>Cancel</Button>\r\n            </div>)\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        workspaceState: state.util.workspaceState,\r\n        currentUser: state.auth.currentUser,\r\n        workouts: state.workout.workouts,\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        createWorkoutHandler: (name, cycles, id) => dispatch(workoutActionCreators.createWorkout(name, cycles, id)),\r\n        setWorkspaceState: (state) => dispatch(utilActionCreators.setWorkspaceState(state)),  \r\n        setSaveRequired: (bool) => dispatch(utilActionCreators.saveRequired(bool)),\r\n        fetchWorkouts: (token) => dispatch(utilActionCreators.asyncFetchWorkouts(token)),\r\n        selectWorkoutHandler: (workout) => dispatch(utilActionCreators.selectWorkoutHandler(workout)), \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateWorkoutForm);","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\Timer\\Timer.js",["145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160"],"import React, { useState, useEffect, useCallback } from 'react';\r\nimport TimerControls from './TimerControls/TimerControls';\r\nimport TimerSummary from './TimerSummary/TimerSummary';\r\nimport classes from './Timer.module.css';\r\n\r\n\r\nconst Timer = props => {\r\n\r\n    const totalCycles = props.selectedWorkout.cycles;\r\n    const [currentCycle, setCurrentCycle] = useState(1);\r\n\r\n    const [currentExerciseIndex, setCurrentExerciseIndex] = useState(0);\r\n    const totalExercises = props.selectedWorkout.exercises.length;\r\n    const [SWE, setSWE] = useState(props.selectedWorkout.exercises[currentExerciseIndex])\r\n\r\n    const [countdown, setCountdown] = useState(10);\r\n    const [paused, setPaused] = useState(true);\r\n\r\n    const [currentSet, setCurrentSet] = useState(1);\r\n    const noOfSets = SWE.noOfSets;\r\n\r\n    const [currentRep, setCurrentRep] = useState(1);\r\n    const lengthOfRep = SWE.lengthOfRep;\r\n\r\n    const [timeLeftOfRep, setTimeLeftOfRep] = useState(lengthOfRep);\r\n    const noofReps = SWE.noOfReps;\r\n\r\n    const restLength = SWE.restBetweenSets;\r\n    const [timeLeftOfRest, setTimeLeftOfRest] = useState(restLength);\r\n\r\n    const restLengthBetweenReps = SWE.restBetweenReps;\r\n    const [timeLeftOfRestBetweenReps, setTimeLeftOfRestBetweenReps] = useState(restLengthBetweenReps);\r\n\r\n    const restLengthBetweenExercises = props.selectedWorkout.restBetweenExercises;\r\n    const [timeLeftOfRestBetweenExercises, setTimeLeftOfRestBetweenExercises] = useState(restLengthBetweenExercises);\r\n\r\n    const restLengthBetweenCycles = props.selectedWorkout.restBetweenCycles;\r\n    const [timeLeftOfRestBetweenCycles, setTimeLeftOfRestBetweenCycles] = useState(restLengthBetweenCycles);\r\n\r\n    const [currentInterval, setCurrentInterval] = useState(null);\r\n\r\n    const [workoutFinished, setWorkoutFinished] = useState(false);\r\n    const [exerciseFinished, setExerciseFinished] = useState(false);\r\n    const [cycleFinished, setCycleFinished] = useState(false);\r\n    const [workoutState, setWorkoutState] = useState('countdown');\r\n\r\n\r\n    ///COUNTDOWN\r\n    useEffect(() => {\r\n        if (countdown === 0) {\r\n            clearInterval(currentInterval)\r\n            beginSet()\r\n        }\r\n    }, [countdown])\r\n\r\n\r\n    const beginCountdown = () => {\r\n        const myCountdownTimer = setInterval(() => {\r\n            setCountdown(prev => prev - 1)\r\n        }, 1000)\r\n        setCurrentInterval(myCountdownTimer)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setSWE(props.selectedWorkout.exercises[currentExerciseIndex])\r\n    }, [currentExerciseIndex])\r\n\r\n    useEffect(() => {\r\n        if (workoutState !== 'countdown') beginSet()\r\n    }, [SWE])\r\n\r\n    ////rest between exercises\r\n    useEffect(() => {\r\n        if (timeLeftOfRestBetweenExercises === 0) {\r\n            clearInterval(currentInterval)\r\n            setCurrentExerciseIndex(prev => prev + 1)\r\n            setCurrentSet(1)\r\n            setCurrentRep(1)\r\n            setTimeLeftOfRestBetweenExercises(restLengthBetweenExercises)\r\n        }\r\n    }, [timeLeftOfRestBetweenExercises])\r\n\r\n\r\n    const beginNextExercise = () => {\r\n        setWorkoutState('rest between exercises')\r\n        const myRestBetweenExerciseTimer = setInterval(() => {\r\n            setTimeLeftOfRestBetweenExercises(prev => prev - 1)\r\n        }, 1000)\r\n        setCurrentInterval(myRestBetweenExerciseTimer);\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (timeLeftOfRestBetweenCycles === 0) {\r\n            setTimeLeftOfRestBetweenCycles(restLengthBetweenCycles)\r\n            setCurrentCycle(prev => prev + 1)\r\n            setCurrentExerciseIndex(0)\r\n            beginSet()\r\n        }\r\n    }, [timeLeftOfRestBetweenCycles])\r\n\r\n\r\n    //// CYCLES\r\n    const beginNextCycle = () => {\r\n        if (currentCycle === totalCycles) {\r\n            setWorkoutFinished(true)\r\n        } else {\r\n            setTimeLeftOfRep(lengthOfRep)\r\n            setWorkoutState('rest between cycles')\r\n            setCurrentSet(1)\r\n            setCurrentRep(1)\r\n            const myRestBetweenCycleTimer = setInterval(() => {\r\n                setTimeLeftOfRestBetweenCycles(prev => prev - 1)\r\n            }, 1000)\r\n            setCurrentInterval(myRestBetweenCycleTimer);\r\n        }\r\n    }\r\n\r\n    ///REPS\r\n    useEffect(() => {\r\n        if (timeLeftOfRep === 0) {\r\n            clearInterval(currentInterval)\r\n            setTimeLeftOfRep(lengthOfRep)\r\n            //check of whther the exercise is still going\r\n            if (currentSet !== noOfSets || currentRep !== noofReps) {\r\n                if (currentRep < noofReps) {\r\n                    setTimeLeftOfRestBetweenReps(restLengthBetweenReps)\r\n                    beginRestBetweenReps()\r\n                } else {\r\n                    setTimeLeftOfRest(restLength)\r\n                    beginRestBetweenSets()\r\n                }\r\n            } else {\r\n                if (currentExerciseIndex === (totalExercises - 1)) {\r\n                    beginNextCycle()\r\n                } else {\r\n                    beginNextExercise()\r\n                }\r\n            }\r\n        }\r\n    }, [timeLeftOfRep])\r\n\r\n\r\n    const beginNextRep = () => {\r\n        setWorkoutState('reps')\r\n        const myRepInterval = setInterval(() => {\r\n            setTimeLeftOfRep(prev => prev - 1)\r\n        }, 1000)\r\n        setCurrentInterval(myRepInterval);\r\n    }\r\n\r\n\r\n    ////SETS\r\n    const beginSet = () => {\r\n        clearInterval(currentInterval)\r\n        setTimeLeftOfRep(lengthOfRep)\r\n        if (currentSet <= noOfSets) {\r\n            beginNextRep()\r\n        }\r\n    }\r\n\r\n    // resting between reps\r\n    useEffect(() => {\r\n        if (timeLeftOfRestBetweenReps === 0 && workoutState !== 'countdown') {\r\n            setTimeLeftOfRep(lengthOfRep)\r\n            beginNextRep()\r\n            setCurrentRep(prev => prev + 1)\r\n            clearInterval(currentInterval)\r\n            setTimeLeftOfRestBetweenReps(restLengthBetweenReps)\r\n        }\r\n    }, [timeLeftOfRestBetweenReps])\r\n\r\n    const beginRestBetweenReps = () => {\r\n        setWorkoutState('rest between reps')\r\n        const myRestBetweenRepsInterval = setInterval(() => {\r\n            setTimeLeftOfRestBetweenReps(prev => prev - 1)\r\n        }, 1000)\r\n        setCurrentInterval(myRestBetweenRepsInterval);\r\n    }\r\n\r\n    // resting between sets\r\n    useEffect(() => {\r\n        if (timeLeftOfRest === 0 && workoutState !== 'countdown') {\r\n            clearInterval(currentInterval);\r\n            setCurrentSet(prev => prev + 1)\r\n            setCurrentRep(1)\r\n            beginSet()\r\n        }\r\n    }, [timeLeftOfRest])\r\n\r\n\r\n    const beginRestBetweenSets = () => {\r\n        setWorkoutState('rest between sets')\r\n        const myRestBetweenSets = setInterval(() => {\r\n            setTimeLeftOfRest(prev => prev - 1)\r\n        }, 1000)\r\n        setCurrentInterval(myRestBetweenSets);\r\n    }\r\n\r\n\r\n    const pauseWorkout = () => {\r\n        setPaused(true)\r\n        clearInterval(currentInterval)\r\n    }\r\n\r\n\r\n    const continueWorkout = () => {\r\n        setPaused(false)\r\n        switch (workoutState) {\r\n            case ('countdown'): return beginCountdown();\r\n            case ('reps'): return beginNextRep();\r\n            case ('rest between reps'): return beginRestBetweenReps();\r\n            case ('rest between sets'): return beginRestBetweenSets();\r\n            case ('rest between cycles'): return beginNextCycle();\r\n            case ('rest between exercises'): return beginNextExercise();\r\n            default:\r\n                throw Error({ message: 'crikey' })\r\n        }\r\n    }\r\n\r\n    const nextRep = () => {\r\n        setPaused(true)\r\n        setCountdown(10)\r\n        setTimeLeftOfRep(lengthOfRep)\r\n        setWorkoutState('countdown')\r\n        clearInterval(currentInterval)\r\n        if (currentRep < noofReps) {\r\n            setCurrentRep(prev => prev + 1)\r\n        }\r\n    }\r\n\r\n    const prevRep = () => {\r\n        setTimeLeftOfRep(lengthOfRep)\r\n        setCountdown(10)\r\n        setPaused(true)\r\n        setWorkoutState('countdown')\r\n        clearInterval(currentInterval)\r\n        if (currentRep > 1) {\r\n            setCurrentRep(prev => prev - 1)\r\n        }\r\n    }\r\n\r\n    const prevSet = () => {\r\n        setTimeLeftOfRep(lengthOfRep)\r\n        setCountdown(10)\r\n        setPaused(true)\r\n        setWorkoutState('countdown')\r\n        clearInterval(currentInterval)\r\n        if (currentSet > 1) {\r\n            setCurrentRep(1)\r\n            setCurrentSet(prev => prev - 1)\r\n        }\r\n    }\r\n\r\n    const nextSet = () => {\r\n        setTimeLeftOfRep(lengthOfRep)\r\n        setCountdown(10)\r\n        setPaused(true)\r\n        setWorkoutState('countdown')\r\n        clearInterval(currentInterval)\r\n        if (currentSet < noOfSets) {\r\n            setCurrentRep(1)\r\n            setCurrentSet(prev => prev + 1)\r\n        }\r\n    }\r\n\r\n    const prevExercise = () => {\r\n        setPaused(true)\r\n        setTimeLeftOfRep(lengthOfRep)\r\n        setCountdown(10)\r\n        setWorkoutState('countdown')\r\n        clearInterval(currentInterval)\r\n        setCurrentRep(1)\r\n        setCurrentSet(1)\r\n        if ((currentExerciseIndex + 1) > 1) {\r\n            setCurrentExerciseIndex(prev => prev - 1)\r\n        }\r\n        if (currentExerciseIndex === 0 && currentCycle > 1) {\r\n            setCurrentExerciseIndex(totalExercises - 1)\r\n            setCurrentCycle(prev => prev - 1)\r\n        }\r\n    }\r\n\r\n    const nextExercise = () => {\r\n        setPaused(true)\r\n        setTimeLeftOfRep(lengthOfRep)\r\n        setCountdown(10)\r\n        setWorkoutState('countdown')\r\n        clearInterval(currentInterval)\r\n        setCurrentRep(1)\r\n        setCurrentSet(1)\r\n        if ((currentExerciseIndex + 1) < totalExercises) {\r\n            setCurrentExerciseIndex(prev => prev + 1)\r\n        }\r\n        if (currentExerciseIndex + 1 === totalExercises && currentCycle < totalCycles) {\r\n            setCurrentExerciseIndex(0)\r\n            setCurrentCycle(prev => prev + 1)\r\n        }\r\n    }\r\n\r\n    const prevCycle = () => {\r\n        setTimeLeftOfRep(lengthOfRep)\r\n        setCountdown(10)\r\n        setWorkoutState('countdown')\r\n        clearInterval(currentInterval)\r\n        setCurrentRep(1)\r\n        setCurrentSet(1)\r\n        setCurrentExerciseIndex(0)\r\n        if (currentCycle > 1) setCurrentCycle(prev => prev - 1)\r\n    }\r\n\r\n    const nextCycle = () => {\r\n        setTimeLeftOfRep(lengthOfRep)\r\n        setCountdown(10)\r\n        setWorkoutState('countdown')\r\n        clearInterval(currentInterval)\r\n        setCurrentRep(1)\r\n        setCurrentSet(1)\r\n        setCurrentExerciseIndex(0)\r\n        if (currentCycle < totalCycles) setCurrentCycle(prev => prev + 1)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.TimerContainer}>\r\n            <TimerSummary\r\n                CEI={currentExerciseIndex + 1}\r\n                currentCycle={currentCycle}\r\n                totalExercises={totalExercises}\r\n                noOfReps={noofReps}\r\n                noOfSets={noOfSets}\r\n                totalCycles={totalCycles}\r\n                currentRep={currentRep}\r\n                currentSet={currentSet}\r\n                countdown={countdown}\r\n                workoutState={workoutState}\r\n                timeLeftOfRep={timeLeftOfRep}\r\n                timeLeftOfRest={timeLeftOfRest}\r\n                timeLeftOfRestBetweenCycles={timeLeftOfRestBetweenCycles}\r\n                timeLeftOfRestBetweenExercises={timeLeftOfRestBetweenExercises}\r\n                timeLeftOfRestBetweenReps={timeLeftOfRestBetweenReps}\r\n                paused={paused} />\r\n\r\n\r\n\r\n            <TimerControls\r\n                first={currentExerciseIndex === 0 && currentCycle === 1}\r\n                last={currentExerciseIndex * currentCycle === (totalExercises - 1) * totalCycles}\r\n                prevName={\r\n                    props.selectedWorkout.exercises[currentExerciseIndex - 1] ?\r\n                        props.selectedWorkout.exercises[currentExerciseIndex - 1].name :\r\n                        props.selectedWorkout.exercises[props.selectedWorkout.exercises.length - 1].name}\r\n                nextName={\r\n                    currentExerciseIndex + 1 < totalExercises ?\r\n                        props.selectedWorkout.exercises[currentExerciseIndex + 1].name :\r\n                        props.selectedWorkout.exercises[0].name}\r\n                name={SWE.name}\r\n                paused={paused}\r\n                stepForward={() => nextSet()}\r\n                stepBackward={() => prevSet()}\r\n                backward={() => prevRep()}\r\n                forward={() => nextRep()}\r\n                play={() => continueWorkout()}\r\n                pause={() => pauseWorkout()}\r\n                nextExercise={nextExercise}\r\n                prevExercise={prevExercise} />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Timer;","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\SelectedWorkout\\SelectedWorkout.js",["161"],"import React, {useState, useRef, useEffect} from 'react';\r\nimport classes from './SelectedWorkout.module.css';\r\nimport {connect} from 'react-redux';\r\nimport ExcerciseListItems from './ExcerciseListItems/ExcerciseListItems';\r\nimport {DragDropContext, Droppable, Draggable} from 'react-beautiful-dnd';\r\nimport * as utilActionCreators from '../../../store/actions/utils';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport axios from 'axios';\r\nimport EditWorkoutForm from './EditWorkoutForm/EditWorkoutForm';\r\nimport Icon from '../../../components/UI/FontAwesomeIcon/FontAwesomeIcon';\r\nimport {faTrash, faCheck, faTimes, faEdit} from '@fortawesome/free-solid-svg-icons';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\n\r\n\r\nconst SelectedWorkout = props => {\r\n\r\n    const [deletedConfirmed, setDeletedConfirmed] = useState(false)\r\n    const [dragging, setDragging] = useState(false)\r\n    const bottomOfPage = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if(props.saveRequired) bottomOfPage.current.scrollIntoView()\r\n    }, [props.saveRequired])\r\n\r\n    const changeState = (state) => {\r\n        props.setWorkspaceState(state)\r\n    }\r\n    \r\n    const dragEndHandler = e => {\r\n        setDragging(false)\r\n        if(!props.saveRequired && e.source.index !== e.destination.index) props.setSaveRequired(true);\r\n        props.switchExercises(e.source.index, e.destination.index)\r\n    }\r\n\r\n    const saveChanges = () => {\r\n        const headers = {\r\n            Authorization: `JWT ${props.currentUser.token}`\r\n        }\r\n        axios.patch(`http://127.0.0.1:8000/api/workouts/${props.selectedWorkout.id}/`, props.selectedWorkout, {headers: headers})\r\n        .then(res => {\r\n            props.fetchWorkouts(props.currentUser.token) \r\n            props.setSaveRequired(false)\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n    \r\n    const confirmDeleteWorkout = () => {\r\n        const headers = {\r\n            Authorization: `JWT ${props.currentUser.token}`\r\n        }\r\n        axios.delete(`http://127.0.0.1:8000/api/workouts/${props.selectedWorkout.id}`, {headers: headers})\r\n        .then(res => {\r\n            props.fetchWorkouts(props.currentUser.token) \r\n            props.setSaveRequired(false)\r\n            props.setWorkspaceState('nothing selected')\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    const discardChanges = () => {\r\n        props.fetchWorkouts(props.currentUser.token)\r\n        let unchangedWorkout = props.workouts.filter(wo => wo.id === props.selectedWorkout.id)\r\n        props.selectWorkoutHandler(...unchangedWorkout)\r\n        props.setSaveRequired(false)\r\n    }\r\n    \r\n    const editExercise = (id, name, noOfSets, noOfReps, lengthOfRep, restBetweenReps, restBetweenSets) => {\r\n        props.setSelectedExercise(\r\n            id, name, noOfSets, noOfReps, lengthOfRep, restBetweenReps, restBetweenSets\r\n            )\r\n            props.setWorkspaceState('editingExercise');\r\n        }\r\n        \r\n        const deleteExercise = (id) => {\r\n        props.deleteExercise(id)\r\n        props.setSaveRequired(true)\r\n    }\r\n\r\n    return (\r\n            <div className={classes.SelectedWorkout}>\r\n                <div className={classes.DraggableList}>\r\n                    <div className={classes.WorkoutTitle}>\r\n                        <h2 className={classes.WorkoutH1}>{props.selectedWorkout.name}</h2>\r\n                        {!deletedConfirmed ? \r\n                        <Icon \r\n                            classes={classes.WorkoutIcon}\r\n                            clicked={() => setDeletedConfirmed(true)} \r\n                            icon={faTrash}\r\n                            size=\"2x\"></Icon> : \r\n                        <div className={classes.WorkoutIcon}>\r\n                            <p className={classes.Confirm}>Confirm</p>\r\n                            <Icon \r\n                                clicked={confirmDeleteWorkout} \r\n                                icon={faCheck}\r\n                                size=\"1x\"></Icon> \r\n                            <Icon \r\n                                classes={classes.WorkoutIcon}\r\n                                clicked={() => setDeletedConfirmed(false)} \r\n                                icon={faTimes}\r\n                                size=\"1x\"></Icon> \r\n                        </div>\r\n                        }\r\n                    </div>\r\n                    <DragDropContext onDragEnd={dragEndHandler} onDragStart={() => setDragging(true)}>\r\n                        <Droppable droppableId=\"workoutList\">\r\n                            {(provided) => (\r\n                                <ul className={classes.UL} \r\n                                    ref={provided.innerRef}\r\n                                    key=\"exerciseList\"\r\n                                    {...provided.droppableProps} >\r\n                                    {props.selectedWorkout.exercises.map((exercise, index) => {\r\n                                        return (\r\n                                            <div key={exercise.id} >\r\n                                                <Draggable \r\n                                                    key={exercise.id} \r\n                                                    draggableId={exercise.id}\r\n                                                    index={index}>\r\n                                                    {provided => {\r\n                                                        return (\r\n                                                            <div key={exercise.id}                                              \r\n                                                            className={classes.Draggable}\r\n                                                            {...provided.dragHandleProps}\r\n                                                            {...provided.draggableProps}\r\n                                                            ref={provided.innerRef}>\r\n                                                                <ExcerciseListItems \r\n                                                                    id={exercise.id}\r\n                                                                    name={exercise.name}\r\n                                                                    noOfSets={exercise.noOfSets}\r\n                                                                    noOfReps={exercise.noOfReps}\r\n                                                                    lengthOfRep={exercise.lengthOfRep}\r\n                                                                    restBetweenReps={exercise.restBetweenReps}\r\n                                                                    restBetweenSets={exercise.restBetweenSets} />\r\n                                                                <div>\r\n                                                                    <Button \r\n                                                                        clicked={() => editExercise(exercise.id, exercise.name, exercise.noOfSets, exercise.noOfReps, exercise.lengthOfRep, exercise.restBetweenReps, exercise.restBetweenSets)}\r\n                                                                        extraStyles={classes.Button}>\r\n                                                                        <FontAwesomeIcon icon={faEdit} />\r\n                                                                        <button className={classes.ButtonAbs}></button>\r\n                                                                    </Button>\r\n                                                                    <Button\r\n                                                                        clicked={() => deleteExercise(exercise.id)}\r\n                                                                        extraStyles={classes.Button}>\r\n                                                                        <FontAwesomeIcon icon={faTrash} />\r\n                                                                        <button className={classes.ButtonAbs}></button>\r\n                                                                    </Button>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        )\r\n                                                    }\r\n                                                    }\r\n                                                </Draggable>\r\n                                            </div>\r\n                                        )\r\n                                    })}\r\n                                    {provided.placeholder}\r\n                                </ul>\r\n                            )}\r\n                        </Droppable>\r\n                    </DragDropContext>\r\n                </div>\r\n                <div className={classes.EditWorkoutForm}>\r\n                    <EditWorkoutForm \r\n                        workout={props.selectedWorkout}\r\n                        setSaveRequired={props.setSaveRequired}\r\n                        updateWorkout={props.updateWorkout}/>\r\n                </div>\r\n                <div className={classes.SelectedControls}>\r\n                    {!props.saveRequired ? <Button clicked={() => changeState('creatingExcercise')}>Add Exercise</Button> :\r\n                    <Button clicked={() => discardChanges()}>Discard Changes</Button>    }\r\n                    {props.selectedWorkout.exercises.length === 0 ? null : !props.saveRequired ?\r\n                     <Button clicked={() => changeState('exercising')}>Begin Workout</Button> : null }\r\n                    {props.saveRequired ? \r\n                    <Button \r\n                        disabled={props.selectedWorkout.cycles < 1 || props.selectedWorkout.restBetweenExercises < 1 || props.selectedWorkout.restBetweenCycles < 1}\r\n                        style={{color: 'red'}} \r\n                        clicked={() => saveChanges()}>Save Changes</Button> : null}\r\n                </div>\r\n                <div ref={bottomOfPage}></div>\r\n            </div>\r\n        )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        workouts: state.workout.workouts,\r\n        selectedWorkout: state.util.selectedWorkout,\r\n        saveRequired: state.util.saveRequired,\r\n        currentUser: state.auth.currentUser,\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        switchExercises: (id1, id2) => dispatch(utilActionCreators.switchExercises(id1, id2)),\r\n        setWorkspaceState: (state) => dispatch(utilActionCreators.setWorkspaceState(state)),\r\n        setSaveRequired: (bool) => dispatch(utilActionCreators.saveRequired(bool)),\r\n        fetchWorkouts: (token) => dispatch(utilActionCreators.asyncFetchWorkouts(token)),\r\n        selectWorkoutHandler: (workout) => dispatch(utilActionCreators.selectWorkoutHandler(workout)), \r\n        updateWorkout: (cycles, restBetweenExercises, restBetweenCycles) => dispatch(utilActionCreators.updateWorkout(cycles, restBetweenExercises, restBetweenCycles)),\r\n        setSelectedExercise: (id, name, noOfSets, noOfReps, lengthOfRep, restBetweenReps, restBetweenSets) => dispatch(utilActionCreators.selectExerciseHandler(id, name, noOfSets, noOfReps, lengthOfRep, restBetweenReps, restBetweenSets)),\r\n        deleteExercise: (id) => dispatch(utilActionCreators.deleteExercise(id)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectedWorkout);\r\n\r\n","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\Auth\\Logout.js",["162"],"import React, {useState, useEffect} from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport classes from './Login_Register.module.css';\r\nimport {connect} from 'react-redux';\r\nimport * as AuthActionCreators from '../../../store/actions/auth';\r\nimport * as utilActionCreators from '../../../store/actions/utils';\r\nimport * as workoutActionCreators from '../../../store/actions/workouts';\r\n\r\n\r\n\r\nconst Logout = props => {\r\n\r\n    useEffect(() => {\r\n        if(props.currentUser.token == null) props.setWorkspaceState('login/register')\r\n    })\r\n\r\n    const logout = () => {\r\n        props.logout()\r\n        props.clearWorkouts()\r\n        props.setWorkspaceState('login/register')\r\n    }\r\n\r\n    return (\r\n        <div className={classes.LogoutContainer}>\r\n            <h3>Thanks {props.currentUser.username} - Click here to logout</h3>\r\n            <Button clicked={logout}>Logout</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentUser: state.auth.currentUser,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setWorkspaceState: (state) => dispatch(utilActionCreators.setWorkspaceState(state)), \r\n        logout: () => dispatch(AuthActionCreators.logout()),\r\n        clearWorkouts: () => dispatch(workoutActionCreators.clearWorkouts()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Logout);","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\Auth\\Login-Register.js",["163","164"],"import React, {useState, useEffect} from 'react';\r\nimport {TextInput, PasswordInput} from '../../../components/UI/Input/Input';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport classes from './Login_Register.module.css';\r\nimport {connect} from 'react-redux';\r\nimport * as AuthActionCreators from '../../../store/actions/auth';\r\nimport * as utilActionCreators from '../../../store/actions/utils';\r\nimport * as workoutActionCreators from '../../../store/actions/workouts';\r\n\r\n\r\nconst LoginRegister = ({currentUser, fetchWorkouts, logout, clearWorkouts, setWorkspaceState, login, register, authMessage}) => {\r\n\r\n    const [loginStatus, setLoginStatus] = useState(true)\r\n    const [username, setUsername] = useState(null)\r\n    const [email, setEmail] = useState(null)\r\n    const [password, setPassword] = useState(null)\r\n    const [password2, setPassword2] = useState(null)\r\n\r\n    useEffect(() => {\r\n        logout()\r\n        clearWorkouts()\r\n    }, []);\r\n    \r\n    useEffect(() => {\r\n        if(currentUser.token != null) {\r\n            setWorkspaceState('nothing selected')\r\n            fetchWorkouts(currentUser.token)\r\n        }\r\n    }, [currentUser.token])\r\n\r\n\r\n    const formHandler = e => {\r\n        e.preventDefault();\r\n        loginStatus ? login(username, password, currentUser.token) : register(username, email, password, password2)\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className={classes.LoginContainer}>\r\n            <h2>{loginStatus ? 'Login' : 'Register'} Page</h2>\r\n            <Button extraStyles={classes.ButtonContainer} clicked={() => setLoginStatus(!loginStatus)}>{loginStatus ? 'Switch to Register' : 'Switch to Login'}</Button>\r\n            <form onSubmit={formHandler}>\r\n                <TextInput label=\"Username\" changed={(e) => setUsername(e.target.value)} value={username}/>\r\n                {loginStatus ? null : <TextInput label=\"Email\" changed={(e) => setEmail(e.target.value)} value={email}/>}\r\n                <PasswordInput label=\"Password\" changed={(e) => setPassword(e.target.value)} value={password}/>\r\n                {loginStatus ? null : <PasswordInput label=\"Confirm Password\" changed={(e) => setPassword2(e.target.value)} value={password2}/>}\r\n                <Button extraStyles={classes.ButtonContainer} type=\"submit\">{loginStatus ? 'Login' : 'Register'}</Button>\r\n            </form>\r\n            { authMessage.map((message, idx) => (\r\n                <h6 key={idx}>{message}</h6>\r\n            )) \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        authMessage: state.auth.authMessage,\r\n        currentUser: state.auth.currentUser,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        logout: () => dispatch(AuthActionCreators.logout()),\r\n        setWorkspaceState: (state) => dispatch(utilActionCreators.setWorkspaceState(state)), \r\n        register: (username, email, password1, password2) => dispatch(AuthActionCreators.asyncRegister(username, email, password1, password2)),\r\n        login: (username, password, token) => dispatch(AuthActionCreators.asyncLogin(username, password, token)),\r\n        clearWorkouts: () => dispatch(workoutActionCreators.clearWorkouts()),\r\n        fetchWorkouts: (token) => dispatch(utilActionCreators.asyncFetchWorkouts(token))\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginRegister);","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\components\\UI\\Button\\Button.js",[],"C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\components\\UI\\FontAwesomeIcon\\FontAwesomeIcon.js",[],"C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\store\\actions\\actionTypes.js",[],"C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\axios.js",["165"],"import axios from 'axios';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nexport const AuthAxios = axios.create({\r\n    baseURL: 'http://127.0.0.1:8000/api/auth',\r\n    });\r\n\r\n","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\store\\actions\\workouts.js",[],"C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\components\\UI\\Input\\Input.js",["166","167"],"import React, { useState, useEffect } from 'react';\r\nimport classes from './Input.module.css';\r\n\r\n\r\n\r\nexport const NumberInput = props => {\r\n\r\n\r\n    return (<div className={classes.FlexInput}>\r\n        <label className={classes.Label}>{props.label}</label>\r\n        <input\r\n            min={props.min}\r\n            style={{ width: '50px' }}\r\n            type=\"number\"\r\n            value={props.value}\r\n            placeholder={props.placeholder}\r\n            onChange={props.changed} />\r\n    </div>)\r\n}\r\n\r\nexport const DualNumberInput = props => {\r\n\r\n\r\n    return (<div className={classes.DualFlexInput}>\r\n        <label className={classes.Label}>{props.label}</label>\r\n        <input\r\n            min={props.minuteMin}\r\n            style={{ width: '50px', height: '30px' }}\r\n            type=\"number\"\r\n            value={props.minuteVal}\r\n            placeholder={props.minutePlaceholder}\r\n            onChange={props.minuteChanged} /> m\r\n        <input\r\n            min={props.min}\r\n            style={{ width: '50px', height: '30px' }}\r\n            type=\"number\"\r\n            value={props.secondVal}\r\n            placeholder={props.secondPlaceholder}\r\n            onChange={props.secondChanged} /> s\r\n    </div>)\r\n}\r\n\r\n\r\nexport const TextInput = props => {\r\n    return (\r\n        <div className={classes.FlexInput}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            <input\r\n                type=\"text\"\r\n                value={props.value}\r\n                onChange={props.changed} />\r\n        </div>\r\n    )\r\n}\r\nexport const PasswordInput = props => {\r\n    return (\r\n        <div className={classes.FlexInput}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            <input\r\n                type=\"password\"\r\n                value={props.value}\r\n                onChange={props.changed} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const RadioInput = props => {\r\n    return (\r\n        <div>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            <input\r\n                type=\"radio\"\r\n                value={props.value}\r\n                name={props.name}\r\n                placeholder={props.placeholder} />\r\n        </div>\r\n    )\r\n}\r\n\r\n","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\Timer\\TimerControls\\TimerControls.js",["168","169"],"import React, { useEffect, useState } from 'react';\r\nimport { faPause, faPlay, faStepBackward, faStepForward, faBackward, faForward, faChevronRight, faChevronLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport classes from './TimerControls.module.css';\r\nimport Icon from '../../../../components/UI/FontAwesomeIcon/FontAwesomeIcon';\r\n\r\n\r\n\r\n\r\nconst TimerControls = props => {\r\n\r\n\r\n    let playPauseControl = props.paused ?\r\n        <Icon icon={faPlay} clicked={props.play} size=\"3x\" /> :\r\n        <Icon icon={faPause} clicked={props.pause} size=\"3x\" />\r\n\r\n\r\n    const stepForwardIcon = <Icon icon={faStepForward} clicked={props.stepForward} size=\"2x\" />\r\n    const stepBackwardIcon = <Icon icon={faStepBackward} clicked={props.stepBackward} size=\"2x\" />\r\n    const backwardIcon = <Icon icon={faBackward} clicked={props.backward} size=\"2x\" />\r\n    const forwardIcon = <Icon icon={faForward} clicked={props.forward} size=\"2x\" />\r\n\r\n\r\n    return (\r\n        <div className={classes.Controls}>\r\n            <div className={classes.SecondaryControls}>\r\n                <Icon icon={faChevronLeft} size=\"3x\" clicked={() => props.prevExercise()} />\r\n                <div className={classes.Toggle}>\r\n                    <h4 className={classes.Prev}>\r\n                        {!props.first ? props.prevName : null}\r\n                    </h4>\r\n                    <h1 className={classes.ExerciseName}>\r\n                        {props.name}\r\n                    </h1>\r\n                    <h4 className={classes.Next}>\r\n                        {!props.last ? props.nextName : null}\r\n                    </h4>\r\n                </div>\r\n                <Icon icon={faChevronRight} size=\"3x\" clicked={() => props.nextExercise()} />\r\n            </div>\r\n            <div className={classes.MainControls}>\r\n                <div className={classes.Buttons}>\r\n                    {stepBackwardIcon}\r\n                    <p className={classes.IconDesc}>Set</p>\r\n                </div>\r\n                <div className={classes.Buttons}>\r\n                    {backwardIcon}\r\n                    <p className={classes.IconDesc}>Rep</p>\r\n                </div>\r\n                {playPauseControl}\r\n                <div className={classes.Buttons}>\r\n                    {forwardIcon}\r\n                    <p className={classes.IconDesc}>Rep</p>\r\n                </div>\r\n                <div className={classes.Buttons}>\r\n                    {stepForwardIcon}\r\n                    <p className={classes.IconDesc}>Set</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TimerControls;","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\Timer\\TimerSummary\\TimerSummary.js",["170","171","172","173"],"import React, { useState, useEffect } from 'react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {} from '@fortawesome/free-solid-svg-icons';\r\nimport classes from './TimerSummary.module.css';\r\nimport Clock from '../Clock/Clock';\r\n\r\nconst TimerSummary = props => {\r\n\r\n    let summary = (\r\n        <div>\r\n            {(props.CEI ) + ((props.currentCycle - 1) * props.totalExercises)} / {props.totalExercises * props.totalCycles}\r\n        </div>\r\n        )\r\n\r\n    let clockcount;\r\n    let restState;\r\n\r\n    switch(props.workoutState) {\r\n        case ('countdown'): restState = 'countdown'; clockcount = props.countdown; break;\r\n        case ('reps'): restState = 'work'; clockcount = props.timeLeftOfRep; break;\r\n        case ('rest between reps'): restState = 'rest'; clockcount = props.timeLeftOfRestBetweenReps; break;\r\n        case ('rest between sets'): restState = 'rest'; clockcount = props.timeLeftOfRest;  break;\r\n        case ('rest between cycles'): restState = 'rest'; clockcount = props.timeLeftOfRestBetweenCycles; break;\r\n        case ('rest between exercises'): restState = 'rest'; clockcount = props.timeLeftOfRestBetweenExercises; break;\r\n        default:\r\n            throw Error({message: 'crikey'})\r\n    }\r\n\r\n    let clockStyles = restState ? classes.RestState : classes.RepState;\r\n\r\n    return (\r\n        <div className={classes.SummaryContainer}>\r\n            <Clock \r\n                workoutState={props.workoutState} \r\n                clockcount={clockcount} \r\n                restState={restState}/>\r\n            <div className={classes.Boxes}>\r\n                <div className={classes.Box}>\r\n                    <h6 className={classes.Title}>Exercise</h6>\r\n                    <div className={classes.Stats}>{summary}</div>\r\n                </div>\r\n                <div className={classes.Box}>\r\n                    <h2 className={classes.Title}>Reps</h2>\r\n                    <h3 className={classes.Stats}>{props.currentRep} / {props.noOfReps}</h3>\r\n                </div>\r\n                <div className={classes.Box}>\r\n                    <h2 className={classes.Title}>Sets</h2>\r\n                    <h3 className={classes.Stats}>{props.currentSet} / {props.noOfSets}</h3>\r\n                </div>\r\n                <div className={classes.Box}>\r\n                    <h6 className={classes.Title}>Cycle</h6>\r\n                    <p className={classes.Stats}>{props.currentCycle} / {props.totalCycles}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TimerSummary;","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\SelectedWorkout\\ExcerciseListItems\\ExcerciseListItems.js",[],"C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\SelectedWorkout\\EditWorkoutForm\\EditWorkoutForm.js",["174"],"import React, { useState, useEffect } from 'react';\r\nimport { NumberInput, DualNumberInput } from '../../../../components/UI/Input/Input';\r\n\r\n\r\nconst EditWorkoutForm = ({ workout, setSaveRequired, updateWorkout }) => {\r\n\r\n\r\n    const [cycles, setCycles] = useState(workout.cycles);\r\n    const [lengthBetweenCycleSeconds, setLengthBetweenCycleSeconds] = useState(30);\r\n    const [lengthBetweenCycleMinutes, setLengthBetweenCycleMinutes] = useState(0);\r\n\r\n    const [lengthBetweenExercisesSeconds, setLengthBetweenExercisesSeconds] = useState(30);\r\n    const [lengthBetweenExercisesMinutes, setLengthBetweenExercisesMinutes] = useState(0);\r\n\r\n\r\n    useEffect(() => {\r\n        if ((lengthBetweenCycleMinutes <= 0 && lengthBetweenCycleSeconds <= 0) || (lengthBetweenExercisesMinutes <= 0 && lengthBetweenExercisesSeconds <= 0)) {\r\n        } else {\r\n            updateWorkout(\r\n                cycles,\r\n                (Number(lengthBetweenExercisesMinutes * 60)) + Number(lengthBetweenExercisesSeconds),\r\n                (Number(lengthBetweenCycleMinutes * 60)) + Number(lengthBetweenCycleSeconds))\r\n        }\r\n    }, [cycles,\r\n        lengthBetweenCycleMinutes,\r\n        lengthBetweenCycleSeconds,\r\n        lengthBetweenExercisesMinutes,\r\n        lengthBetweenExercisesSeconds])\r\n\r\n\r\n    useEffect(() => {\r\n        setCycles(workout.cycles)\r\n        setLengthBetweenCycleSeconds(workout.restBetweenCycles % 60)\r\n        setLengthBetweenCycleMinutes(Math.floor(workout.restBetweenCycles / 60))\r\n        setLengthBetweenExercisesSeconds(workout.restBetweenExercises % 60)\r\n        setLengthBetweenExercisesMinutes(Math.floor(workout.restBetweenExercises / 60))\r\n\r\n    }, [workout])\r\n\r\n    return (\r\n        <div>\r\n            <NumberInput\r\n                min=\"1\"\r\n                label=\"Workout Cycles\"\r\n                value={cycles}\r\n                changed={(e) => {\r\n                    setCycles(e.target.value)\r\n                    setSaveRequired(true)\r\n                }\r\n                } />\r\n            {cycles > 1 ? <DualNumberInput\r\n                min=\"1\"\r\n                minuteMin=\"0\"\r\n                label=\"Rest Between Cycles\"\r\n                minuteVal={lengthBetweenCycleMinutes}\r\n                secondVal={lengthBetweenCycleSeconds}\r\n                minuteChanged={(e) => {\r\n                    setLengthBetweenCycleMinutes(e.target.value)\r\n                    setSaveRequired(true)\r\n                }}\r\n                secondChanged={(e) => {\r\n                    setLengthBetweenCycleSeconds(e.target.value)\r\n                    setSaveRequired(true)\r\n                }} />\r\n                : null}\r\n            {workout.exercises.length > 1 ?\r\n                <DualNumberInput\r\n                    minuteMin=\"0\"\r\n                    min=\"1\"\r\n                    label=\"Rest Between Exercises\"\r\n                    minuteVal={lengthBetweenExercisesMinutes}\r\n                    secondVal={lengthBetweenExercisesSeconds}\r\n                    minuteChanged={(e) => {\r\n                        setLengthBetweenExercisesMinutes(e.target.value)\r\n                        setSaveRequired(true)\r\n                    }}\r\n                    secondChanged={(e) => {\r\n                        setLengthBetweenExercisesSeconds(e.target.value)\r\n                        setSaveRequired(true)\r\n                    }} />\r\n                : null}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditWorkoutForm;","C:\\Users\\ollie\\djangoprojects\\DRF\\workoutplanner\\workoutplanner\\ui\\src\\containers\\WorkSpace\\Timer\\Clock\\Clock.js",[],{"ruleId":"175","severity":1,"message":"176","line":1,"column":8,"nodeType":"177","messageId":"178","endLine":1,"endColumn":13},{"ruleId":"175","severity":1,"message":"176","line":1,"column":8,"nodeType":"177","messageId":"178","endLine":1,"endColumn":13},{"ruleId":"175","severity":1,"message":"176","line":1,"column":8,"nodeType":"177","messageId":"178","endLine":1,"endColumn":13},{"ruleId":"175","severity":1,"message":"179","line":1,"column":16,"nodeType":"177","messageId":"178","endLine":1,"endColumn":24},{"ruleId":"180","severity":1,"message":"181","line":15,"column":8,"nodeType":"182","endLine":15,"endColumn":10,"suggestions":"183"},{"ruleId":"175","severity":1,"message":"184","line":1,"column":16,"nodeType":"177","messageId":"178","endLine":1,"endColumn":26},{"ruleId":"175","severity":1,"message":"185","line":3,"column":9,"nodeType":"177","messageId":"178","endLine":3,"endColumn":18},{"ruleId":"180","severity":1,"message":"186","line":18,"column":8,"nodeType":"182","endLine":18,"endColumn":10,"suggestions":"187"},{"ruleId":"180","severity":1,"message":"188","line":36,"column":8,"nodeType":"182","endLine":36,"endColumn":10,"suggestions":"189"},{"ruleId":"175","severity":1,"message":"190","line":2,"column":9,"nodeType":"177","messageId":"178","endLine":2,"endColumn":20},{"ruleId":"175","severity":1,"message":"191","line":6,"column":8,"nodeType":"177","messageId":"178","endLine":6,"endColumn":12},{"ruleId":"180","severity":1,"message":"192","line":30,"column":8,"nodeType":"182","endLine":30,"endColumn":24,"suggestions":"193"},{"ruleId":"175","severity":1,"message":"194","line":1,"column":38,"nodeType":"177","messageId":"178","endLine":1,"endColumn":49},{"ruleId":"175","severity":1,"message":"195","line":42,"column":12,"nodeType":"177","messageId":"178","endLine":42,"endColumn":27},{"ruleId":"175","severity":1,"message":"196","line":43,"column":12,"nodeType":"177","messageId":"178","endLine":43,"endColumn":28},{"ruleId":"175","severity":1,"message":"197","line":43,"column":30,"nodeType":"177","messageId":"178","endLine":43,"endColumn":49},{"ruleId":"175","severity":1,"message":"198","line":44,"column":12,"nodeType":"177","messageId":"178","endLine":44,"endColumn":25},{"ruleId":"175","severity":1,"message":"199","line":44,"column":27,"nodeType":"177","messageId":"178","endLine":44,"endColumn":43},{"ruleId":"180","severity":1,"message":"200","line":54,"column":8,"nodeType":"182","endLine":54,"endColumn":19,"suggestions":"201"},{"ruleId":"180","severity":1,"message":"202","line":66,"column":8,"nodeType":"182","endLine":66,"endColumn":30,"suggestions":"203"},{"ruleId":"180","severity":1,"message":"204","line":70,"column":8,"nodeType":"182","endLine":70,"endColumn":13,"suggestions":"205"},{"ruleId":"180","severity":1,"message":"206","line":81,"column":8,"nodeType":"182","endLine":81,"endColumn":40,"suggestions":"207"},{"ruleId":"180","severity":1,"message":"208","line":100,"column":8,"nodeType":"182","endLine":100,"endColumn":37,"suggestions":"209"},{"ruleId":"180","severity":1,"message":"210","line":141,"column":8,"nodeType":"182","endLine":141,"endColumn":23,"suggestions":"211"},{"ruleId":"180","severity":1,"message":"212","line":171,"column":8,"nodeType":"182","endLine":171,"endColumn":35,"suggestions":"213"},{"ruleId":"180","severity":1,"message":"214","line":189,"column":8,"nodeType":"182","endLine":189,"endColumn":24,"suggestions":"215"},{"ruleId":"175","severity":1,"message":"216","line":301,"column":11,"nodeType":"177","messageId":"178","endLine":301,"endColumn":20},{"ruleId":"175","severity":1,"message":"217","line":312,"column":11,"nodeType":"177","messageId":"178","endLine":312,"endColumn":20},{"ruleId":"175","severity":1,"message":"218","line":18,"column":12,"nodeType":"177","messageId":"178","endLine":18,"endColumn":20},{"ruleId":"175","severity":1,"message":"179","line":1,"column":16,"nodeType":"177","messageId":"178","endLine":1,"endColumn":24},{"ruleId":"180","severity":1,"message":"219","line":22,"column":8,"nodeType":"182","endLine":22,"endColumn":10,"suggestions":"220"},{"ruleId":"180","severity":1,"message":"221","line":29,"column":8,"nodeType":"182","endLine":29,"endColumn":27,"suggestions":"222"},{"ruleId":"175","severity":1,"message":"223","line":2,"column":9,"nodeType":"177","messageId":"178","endLine":2,"endColumn":16},{"ruleId":"175","severity":1,"message":"179","line":1,"column":17,"nodeType":"177","messageId":"178","endLine":1,"endColumn":25},{"ruleId":"175","severity":1,"message":"224","line":1,"column":27,"nodeType":"177","messageId":"178","endLine":1,"endColumn":36},{"ruleId":"175","severity":1,"message":"224","line":1,"column":17,"nodeType":"177","messageId":"178","endLine":1,"endColumn":26},{"ruleId":"175","severity":1,"message":"179","line":1,"column":28,"nodeType":"177","messageId":"178","endLine":1,"endColumn":36},{"ruleId":"175","severity":1,"message":"179","line":1,"column":17,"nodeType":"177","messageId":"178","endLine":1,"endColumn":25},{"ruleId":"175","severity":1,"message":"224","line":1,"column":27,"nodeType":"177","messageId":"178","endLine":1,"endColumn":36},{"ruleId":"175","severity":1,"message":"225","line":2,"column":9,"nodeType":"177","messageId":"178","endLine":2,"endColumn":24},{"ruleId":"175","severity":1,"message":"226","line":29,"column":9,"nodeType":"177","messageId":"178","endLine":29,"endColumn":20},{"ruleId":"180","severity":1,"message":"227","line":24,"column":8,"nodeType":"182","endLine":28,"endColumn":39,"suggestions":"228"},"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["229"],"'useContext' is defined but never used.","'AuthAxios' is defined but never used.","React Hook useEffect has a missing dependency: 'calculateDuration'. Either include it or remove the dependency array.",["230"],"React Hook useEffect has missing dependencies: 'props.selectedExercise' and 'props.workspaceState'. Either include them or remove the dependency array.",["231"],"'NumberInput' is defined but never used.","'uuid' is defined but never used.","React Hook useEffect has missing dependencies: 'newWorkoutID' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["232"],"'useCallback' is defined but never used.","'workoutFinished' is assigned a value but never used.","'exerciseFinished' is assigned a value but never used.","'setExerciseFinished' is assigned a value but never used.","'cycleFinished' is assigned a value but never used.","'setCycleFinished' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'beginSet' and 'currentInterval'. Either include them or remove the dependency array.",["233"],"React Hook useEffect has a missing dependency: 'props.selectedWorkout.exercises'. Either include it or remove the dependency array. If 'setSWE' needs the current value of 'props.selectedWorkout.exercises', you can also switch to useReducer instead of useState and read 'props.selectedWorkout.exercises' in the reducer.",["234"],"React Hook useEffect has missing dependencies: 'beginSet' and 'workoutState'. Either include them or remove the dependency array.",["235"],"React Hook useEffect has missing dependencies: 'currentInterval' and 'restLengthBetweenExercises'. Either include them or remove the dependency array.",["236"],"React Hook useEffect has missing dependencies: 'beginSet' and 'restLengthBetweenCycles'. Either include them or remove the dependency array.",["237"],"React Hook useEffect has missing dependencies: 'beginNextCycle', 'currentExerciseIndex', 'currentInterval', 'currentRep', 'currentSet', 'lengthOfRep', 'noOfSets', 'noofReps', 'restLength', 'restLengthBetweenReps', and 'totalExercises'. Either include them or remove the dependency array.",["238"],"React Hook useEffect has missing dependencies: 'currentInterval', 'lengthOfRep', 'restLengthBetweenReps', and 'workoutState'. Either include them or remove the dependency array.",["239"],"React Hook useEffect has missing dependencies: 'beginSet', 'currentInterval', and 'workoutState'. Either include them or remove the dependency array.",["240"],"'prevCycle' is assigned a value but never used.","'nextCycle' is assigned a value but never used.","'dragging' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clearWorkouts' and 'logout'. Either include them or remove the dependency array. If 'logout' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["241"],"React Hook useEffect has missing dependencies: 'fetchWorkouts' and 'setWorkspaceState'. Either include them or remove the dependency array. If 'setWorkspaceState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["242"],"'connect' is defined but never used.","'useEffect' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'clockStyles' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'updateWorkout'. Either include it or remove the dependency array. If 'updateWorkout' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["243"],{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},"Update the dependencies array to be: [props]",{"range":"274","text":"275"},"Update the dependencies array to be: [calculateDuration]",{"range":"276","text":"277"},"Update the dependencies array to be: [props.selectedExercise, props.workspaceState]",{"range":"278","text":"279"},"Update the dependencies array to be: [newWorkoutID, props, props.workouts]",{"range":"280","text":"281"},"Update the dependencies array to be: [beginSet, countdown, currentInterval]",{"range":"282","text":"283"},"Update the dependencies array to be: [currentExerciseIndex, props.selectedWorkout.exercises]",{"range":"284","text":"285"},"Update the dependencies array to be: [SWE, beginSet, workoutState]",{"range":"286","text":"287"},"Update the dependencies array to be: [currentInterval, restLengthBetweenExercises, timeLeftOfRestBetweenExercises]",{"range":"288","text":"289"},"Update the dependencies array to be: [beginSet, restLengthBetweenCycles, timeLeftOfRestBetweenCycles]",{"range":"290","text":"291"},"Update the dependencies array to be: [beginNextCycle, currentExerciseIndex, currentInterval, currentRep, currentSet, lengthOfRep, noOfSets, noofReps, restLength, restLengthBetweenReps, timeLeftOfRep, totalExercises]",{"range":"292","text":"293"},"Update the dependencies array to be: [currentInterval, lengthOfRep, restLengthBetweenReps, timeLeftOfRestBetweenReps, workoutState]",{"range":"294","text":"295"},"Update the dependencies array to be: [beginSet, currentInterval, timeLeftOfRest, workoutState]",{"range":"296","text":"297"},"Update the dependencies array to be: [clearWorkouts, logout]",{"range":"298","text":"299"},"Update the dependencies array to be: [currentUser.token, fetchWorkouts, setWorkspaceState]",{"range":"300","text":"301"},"Update the dependencies array to be: [cycles, lengthBetweenCycleMinutes, lengthBetweenCycleSeconds, lengthBetweenExercisesMinutes, lengthBetweenExercisesSeconds, updateWorkout]",{"range":"302","text":"303"},[698,700],"[props]",[743,745],"[calculateDuration]",[1604,1606],"[props.selectedExercise, props.workspaceState]",[1127,1143],"[newWorkoutID, props, props.workouts]",[2187,2198],"[beginSet, countdown, currentInterval]",[2513,2535],"[currentExerciseIndex, props.selectedWorkout.exercises]",[2624,2629],"[SWE, beginSet, workoutState]",[2994,3026],"[currentInterval, restLengthBetweenExercises, timeLeftOfRestBetweenExercises]",[3609,3638],"[beginSet, restLengthBetweenCycles, timeLeftOfRestBetweenCycles]",[5026,5041],"[beginNextCycle, currentExerciseIndex, currentInterval, currentRep, currentSet, lengthOfRep, noOfSets, noofReps, restLength, restLengthBetweenReps, timeLeftOfRep, totalExercises]",[5872,5899],"[currentInterval, lengthOfRep, restLengthBetweenReps, timeLeftOfRestBetweenReps, workoutState]",[6481,6497],"[beginSet, currentInterval, timeLeftOfRest, workoutState]",[965,967],"[clearWorkouts, logout]",[1156,1175],"[currentUser.token, fetchWorkouts, setWorkspaceState]",[1114,1274],"[cycles, lengthBetweenCycleMinutes, lengthBetweenCycleSeconds, lengthBetweenExercisesMinutes, lengthBetweenExercisesSeconds, updateWorkout]"]